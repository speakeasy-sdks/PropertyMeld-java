/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package PropertyMeld.MeldAPI;

import PropertyMeld.MeldAPI.utils.HTTPClient;
import PropertyMeld.MeldAPI.utils.SpeakeasyHTTPClient;

/**
 * Property Meld API: An API to access data from your Property Meld Account.
 */
public class MeldAPI {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Property Meld Production Application
         */
        "https://app.propertymeld.com/",
	};
  	
    public Building building;
    public CheckToken checkToken;
    public Estimates estimates;
    public Expenditure expenditure;
    public Floor floor;
    public Invoice invoice;
    public ManagementAgent managementAgent;
    public ManagerFile managerFile;
    public Meld meld;
    public Owner owner;
    public Ping ping;
    public Project project;
    public Property property;
    public PropertyGroup propertyGroup;
    public Resident resident;
    public ResidentFile residentFile;
    public Schema schema;
    public Unit unit;
    public Vendor vendor;
    public VendorFile vendorFile;
    public VendorInvite vendorInvite;
    public WorkLog workLog;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = PropertyMeld.MeldAPI.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public MeldAPI build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new MeldAPI(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private MeldAPI(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.building = new Building(this.sdkConfiguration);
		
		this.checkToken = new CheckToken(this.sdkConfiguration);
		
		this.estimates = new Estimates(this.sdkConfiguration);
		
		this.expenditure = new Expenditure(this.sdkConfiguration);
		
		this.floor = new Floor(this.sdkConfiguration);
		
		this.invoice = new Invoice(this.sdkConfiguration);
		
		this.managementAgent = new ManagementAgent(this.sdkConfiguration);
		
		this.managerFile = new ManagerFile(this.sdkConfiguration);
		
		this.meld = new Meld(this.sdkConfiguration);
		
		this.owner = new Owner(this.sdkConfiguration);
		
		this.ping = new Ping(this.sdkConfiguration);
		
		this.project = new Project(this.sdkConfiguration);
		
		this.property = new Property(this.sdkConfiguration);
		
		this.propertyGroup = new PropertyGroup(this.sdkConfiguration);
		
		this.resident = new Resident(this.sdkConfiguration);
		
		this.residentFile = new ResidentFile(this.sdkConfiguration);
		
		this.schema = new Schema(this.sdkConfiguration);
		
		this.unit = new Unit(this.sdkConfiguration);
		
		this.vendor = new Vendor(this.sdkConfiguration);
		
		this.vendorFile = new VendorFile(this.sdkConfiguration);
		
		this.vendorInvite = new VendorInvite(this.sdkConfiguration);
		
		this.workLog = new WorkLog(this.sdkConfiguration);
	}
}