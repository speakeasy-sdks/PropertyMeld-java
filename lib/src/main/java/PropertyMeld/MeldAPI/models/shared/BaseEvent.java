/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package PropertyMeld.MeldAPI.models.shared;

import PropertyMeld.MeldAPI.utils.DateTimeDeserializer;
import PropertyMeld.MeldAPI.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

public class BaseEvent {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classification")
    public Object classification;

    public BaseEvent withClassification(Object classification) {
        this.classification = classification;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_by")
    public java.util.Map<String, Object> createBy;

    public BaseEvent withCreateBy(java.util.Map<String, Object> createBy) {
        this.createBy = createBy;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created")
    public OffsetDateTime created;

    public BaseEvent withCreated(OffsetDateTime created) {
        this.created = created;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public BaseEvent withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dtend")
    public OffsetDateTime dtend;

    public BaseEvent withDtend(OffsetDateTime dtend) {
        this.dtend = dtend;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dtstart")
    public OffsetDateTime dtstart;

    public BaseEvent withDtstart(OffsetDateTime dtstart) {
        this.dtstart = dtstart;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dur_day")
    public Long durDay;

    public BaseEvent withDurDay(Long durDay) {
        this.durDay = durDay;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dur_week")
    public Long durWeek;

    public BaseEvent withDurWeek(Long durWeek) {
        this.durWeek = durWeek;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Long duration;

    public BaseEvent withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;

    public BaseEvent withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public String latitude;

    public BaseEvent withLatitude(String latitude) {
        this.latitude = latitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public String longitude;

    public BaseEvent withLongitude(String longitude) {
        this.longitude = longitude;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizer")
    public String organizer;

    public BaseEvent withOrganizer(String organizer) {
        this.organizer = organizer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rrule")
    public Long rrule;

    public BaseEvent withRrule(Long rrule) {
        this.rrule = rrule;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("update_by")
    public java.util.Map<String, Object> updateBy;

    public BaseEvent withUpdateBy(java.util.Map<String, Object> updateBy) {
        this.updateBy = updateBy;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;

    public BaseEvent withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
    public BaseEvent(@JsonProperty("created") OffsetDateTime created, @JsonProperty("dtstart") OffsetDateTime dtstart, @JsonProperty("id") Long id, @JsonProperty("updated") OffsetDateTime updated) {
        this.created = created;
        this.dtstart = dtstart;
        this.id = id;
        this.updated = updated;
  }
}
