/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package PropertyMeld.MeldAPI;

import PropertyMeld.MeldAPI.utils.HTTPClient;
import PropertyMeld.MeldAPI.utils.HTTPRequest;
import PropertyMeld.MeldAPI.utils.JSON;
import PropertyMeld.MeldAPI.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

public class Resident {
	
	private SDKConfiguration sdkConfiguration;

	public Resident(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public PropertyMeld.MeldAPI.models.operations.ResidentCreateFormResponse residentCreateForm(PropertyMeld.MeldAPI.models.shared.ResidentInput1 request, PropertyMeld.MeldAPI.models.operations.ResidentCreateFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(baseUrl, "/api/v0.0.1/resident/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "request", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentCreateFormResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentCreateFormResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentCreateJsonResponse residentCreateJson(PropertyMeld.MeldAPI.models.shared.ResidentInput request, PropertyMeld.MeldAPI.models.operations.ResidentCreateJsonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(baseUrl, "/api/v0.0.1/resident/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentCreateJsonResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentCreateJsonResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentCreateMultipartResponse residentCreateMultipart(PropertyMeld.MeldAPI.models.shared.ResidentInput1 request, PropertyMeld.MeldAPI.models.operations.ResidentCreateMultipartSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(baseUrl, "/api/v0.0.1/resident/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentCreateMultipartResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentCreateMultipartResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentDestroyResponse residentDestroy(PropertyMeld.MeldAPI.models.operations.ResidentDestroyRequest request, PropertyMeld.MeldAPI.models.operations.ResidentDestroySecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentDestroyRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentDestroyResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentDestroyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentListResponse residentList(PropertyMeld.MeldAPI.models.operations.ResidentListRequest request, PropertyMeld.MeldAPI.models.operations.ResidentListSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(baseUrl, "/api/v0.0.1/resident/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = PropertyMeld.MeldAPI.utils.Utils.getQueryParams(PropertyMeld.MeldAPI.models.operations.ResidentListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentListResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentListResponse(contentType, httpRes.statusCode()) {{
            paginatedResidentList = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.PaginatedResidentList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.PaginatedResidentList.class);
                res.paginatedResidentList = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormResponse residentPartialUpdateForm(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormRequest request, PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "patchedResidentInput1", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateFormResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonResponse residentPartialUpdateJson(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonRequest request, PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "patchedResidentInput", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateJsonResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartResponse residentPartialUpdateMultipart(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartRequest request, PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "patchedResidentInput1", "multipart");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentPartialUpdateMultipartResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentRetrieveResponse residentRetrieve(PropertyMeld.MeldAPI.models.operations.ResidentRetrieveRequest request, PropertyMeld.MeldAPI.models.operations.ResidentRetrieveSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentRetrieveRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentRetrieveResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentRetrieveResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormResponse residentUpdateForm(PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormRequest request, PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "residentInput1", "form");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentUpdateFormResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonResponse residentUpdateJson(PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonRequest request, PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "residentInput", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentUpdateJsonResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }

    public PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartResponse residentUpdateMultipart(PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartRequest request, PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartSecurity security) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = PropertyMeld.MeldAPI.utils.Utils.generateURL(PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartRequest.class, baseUrl, "/api/v0.0.1/resident/{id}/", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = PropertyMeld.MeldAPI.utils.Utils.serializeRequestBody(request, "residentInput1", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = PropertyMeld.MeldAPI.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartResponse res = new PropertyMeld.MeldAPI.models.operations.ResidentUpdateMultipartResponse(contentType, httpRes.statusCode()) {{
            resident = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (PropertyMeld.MeldAPI.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                PropertyMeld.MeldAPI.models.shared.Resident out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), PropertyMeld.MeldAPI.models.shared.Resident.class);
                res.resident = out;
            }
        }

        return res;
    }
}